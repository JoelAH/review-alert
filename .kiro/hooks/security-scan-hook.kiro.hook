{
  "enabled": true,
  "name": "Security Vulnerability Scanner",
  "description": "Automatically scans the codebase for security issues including exposed API keys, hardcoded credentials, potential SQL injection vulnerabilities, authentication bypasses, and other security holes that could lead to unauthorized access. And make sure no server stuff are exposd to the client like DB models and operations.",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "src/**/*.ts",
      "src/**/*.tsx",
      "src/**/*.js",
      "src/**/*.jsx",
      ".env",
      ".env.local",
      ".env.production",
      "package.json",
      "next.config.mjs",
      "tsconfig.json"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Perform a comprehensive security audit of the modified files. Check for:\n\n1. **Exposed Credentials & API Keys:**\n   - Hardcoded API keys, tokens, or secrets in source code\n   - Firebase config keys that should be environment variables\n   - Database connection strings or credentials\n   - Any sensitive data that should be in .env files\n\n2. **Authentication & Authorization Issues:**\n   - Missing authentication checks in API routes\n   - Improper session handling\n   - Authorization bypasses\n   - Insecure cookie configurations\n\n3. **Database Security:**\n   - SQL injection vulnerabilities (even in MongoDB/Mongoose)\n   - NoSQL injection risks\n   - Unsafe database queries\n   - Missing input validation\n\n4. **General Security Vulnerabilities:**\n   - XSS vulnerabilities in React components\n   - CSRF protection issues\n   - Insecure HTTP headers\n   - Unsafe file uploads or processing\n   - Information disclosure through error messages\n   - Missing rate limiting on API endpoints\n\n5. **Configuration Security:**\n   - Insecure Next.js configurations\n   - Exposed development/debug settings in production\n   - Missing security headers\n\nFor each issue found, provide:\n- Exact file location and line number\n- Description of the security risk\n- Recommended fix with code examples\n- Severity level (Critical/High/Medium/Low)\n\nFocus on practical, actionable security improvements for this Next.js/Firebase/MongoDB application.\nAnd make sure no server stuff are exposd to the client like DB models and operations."
  }
}